<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:property-placeholder location="classpath:database/*.properties" />

	<bean id="abstractDataSource" abstract="true"
		class="org.apache.commons.dbcp2.BasicDataSource" p:initialSize="${datasource.default.initialSize}"
		p:maxTotal="${datasource.default.maxTotal}" p:minIdle="${datasource.default.minIdle}"
		p:maxIdle="${datasource.default.maxIdle}" p:maxConnLifetimeMillis="${datasource.default.maxConnLifetimeMillis}"
		p:defaultQueryTimeout="${datasource.default.defaultQueryTimeout}"
		p:maxWaitMillis="${datasource.default.maxWaitMillis}" />

	<bean id="mybatisSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis/mybatis-configuration.xml"
		p:mapperLocations="classpath:mybatis/mappings/**/*.xml" />

	<mybatis-spring:scan base-package="com.spring.data.dao" />

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		autowire="byType" />

	<tx:annotation-driven order="-5" />

	<bean id="daoLogger" class="com.spring.aop.logger.DaoLogger" />

	<aop:config>
		<aop:pointcut
			expression="execution(public * com.spring.data.dao..*Mapper.*(..)) and target(target) and this(proxy)"
			id="mapperMethods" />

		<aop:aspect ref="daoLogger" order="10">
			<aop:before method="logBefore" pointcut-ref="mapperMethods"
				arg-names="target,proxy" />
			<aop:after-throwing method="logOnException"
				pointcut-ref="mapperMethods" throwing="ex" arg-names="ex,target,proxy" />
			<aop:after-returning method="logAfterReturning"
				returning="result" pointcut-ref="mapperMethods" arg-names="result,target,proxy" />
			<aop:after method="logAfter" pointcut-ref="mapperMethods"
				arg-names="target,proxy" />
			<aop:around method="logAround" pointcut-ref="mapperMethods"
				arg-names="target,proxy" />
		</aop:aspect>
	</aop:config>

	<aop:aspectj-autoproxy expose-proxy="true" />

	<bean class="com.spring.aop.logger.SessionFactoryLogger" />

	<bean id="random" class="java.lang.Integer"
		c:value="#{T(org.apache.commons.lang3.RandomUtils).nextInt(1,100)}" />

	<beans profile="jiayuguan,default,!test">
		<bean id="dataSource" parent="abstractDataSource" p:url="${db.jiayuguan.url}"
			p:driverClassName="${db.jiayuguan.driverClassName}" p:username="${db.jiayuguan.username}"
			p:password="${db.jiayuguan.password}" destroy-method="close" />
	</beans>

	<beans profile="test196,test">
		<bean id="dataSource" parent="abstractDataSource" p:url="${db.test.196.url}"
			p:driverClassName="${db.test.196.driverClassName}" p:username="${db.test.196.username}"
			p:password="${db.test.196.password}" destroy-method="close" />
	</beans>
</beans>